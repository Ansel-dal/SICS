@page "/pages/registrarPrestamo"
@using SICS.Client.Pages.Modales;
@inject MenuService _menuServicio;
@inject IConsumidorServicio _ConsumidorServicio;
@inject IDialogService _dialogServicio
@inject IPrestamoServicio _prestamoServicio;
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>

            <MudItem xs="12" >

                <MudCard Class="mb-4" Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Detalle del Consumidor</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudAutocomplete T="ConsumidorDTO" Label="Buscar Consumidor" @bind-Value="_Consumidor" SearchFunc="@BuscarConsumidor"
                                         ResetValueOnEmptyText="true"
                                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                         Variant="Variant.Outlined" Margin="Margin.Dense"
                                         ToStringFunc="@(e => e == null ? null : $"{e.Codigo} - {e.Nombre} {e.Apellido}")" />
                    </MudCardContent>
                </MudCard>


                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Detalle del préstamo</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>

                        <MudGrid Spacing="1">
                            <MudItem sm="12" xs="9" lg="9">
                                <MudTextField @bind-Value="_Item.IdItem" Margin="Margin.Dense"
                                              Label="Item" Variant="Variant.Outlined" ReadOnly="true"></MudTextField>
                            </MudItem>

                            <MudItem sm="12" xs="3" lg="3">
                                <MudButton Variant="Variant.Filled"  Class="mt-1"
                                           StartIcon="@Icons.Material.Filled.Search" Color="Color.Info" FullWidth="true"
                                           OnClick="BuscarItem">Buscar</MudButton>
                            </MudItem>
                            
                            <MudItem sm="12" xs="12" lg="12" Class="mt-4">
                                <MudDatePicker Label="Fecha Devolucion" Margin="Margin.Dense" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" @bind-Date="fechaDevolucion" />
                            </MudItem>

                             <MudItem sm="12" xs="12" lg="12" Class="mt-4">
                                <MudTextField @bind-Value="estadoItem" Margin="Margin.Dense"
                                              Label="Estado del Item" Variant="Variant.Outlined" ></MudTextField>
                             </MudItem>

                             <MudItem sm="12" xs="12" lg="12" Class="mt-4">
                                <div class="d-flex justify-content-center flex-grow-1 flex-wrap justify-center align-center">

                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Registrar">Registrar</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Limpiar" Class="ms-4">Limpiar</MudButton>

                                 </div>
                             </MudItem>

                        </MudGrid>

                    </MudCardContent>
                </MudCard>

             </MudItem>
         </MudGrid>
     </MudPaper>
</MudContainer>



@code {

    DateTime? fechaDevolucion = DateTime.Today;
    private PrestamoDTO _prestamo;
    private ConsumidorDTO _Consumidor;
    private ItemDTO _Item = new ItemDTO();
    private string estadoItem = "";

    protected override async Task OnInitializedAsync()
    {
        _menuServicio.SetMenu(new BreadcrumbItem("Registrar Prestamo", href: null));
    }

    private async Task BuscarItem()
    {
        DialogOptions maxWidth = new DialogOptions() { Position = DialogPosition.TopCenter };
        var dialogo = _dialogServicio.Show<LstLibros>("",maxWidth);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            _Item = (ItemDTO)resultado.Data;
        }
    }

    private async Task<IEnumerable<ConsumidorDTO>> BuscarConsumidor(string valor)
    {

        var response = await _ConsumidorServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<ConsumidorDTO>();

            List<ConsumidorDTO> lista = (List<ConsumidorDTO>)response.value!;
            return lista.FindAll(p => string.Concat(p.Codigo,p.Nombre,p.Apellido).Contains(valor, StringComparison.InvariantCultureIgnoreCase));
        }
        else
        {
            return new List<ConsumidorDTO>();
        }
    }

    private async Task Limpiar()
    {
        estadoItem = "";
        _Consumidor = null;
        _Item = new ItemDTO();
        fechaDevolucion = DateTime.Today;
    }

    private async Task Registrar()
    {
        if (_Consumidor == null)
        {
            await Swal.FireAsync("Oops...", "Debe selecionar el Consumidor!", "error");
            return;
        }

        if (_Item.IdItem == 0)
        {
            await Swal.FireAsync("Oops...", "Debe selecionar el Item!", "error");
            return;
        }


        _prestamo = new PrestamoDTO();
        _prestamo.IdEstadoPrestamo = 1;
        _prestamo.IdConsumidor = _Consumidor.IdConsumidor;
        _prestamo.IdItem = _Item.IdItem;
        _prestamo.FechaDevolucion = fechaDevolucion;
        _prestamo.EstadoEntregado = estadoItem;

        var response = await _prestamoServicio.Crear(_prestamo);

        if (response.status)
        {
            PrestamoDTO prestamoDTO = (PrestamoDTO)response.value!;
            _prestamo = null;
            _Consumidor = null;
            _Item = new ItemDTO();
            estadoItem = "";
            fechaDevolucion = DateTime.Today;

            await Swal.FireAsync("Prestamo registrado", $"Codigo prestamos: {prestamoDTO.Codigo}", "success");
        }
        else
        {
            await Swal.FireAsync("Oops...", "No se pudo registrar!", "error");
        }

    }
}
