@inject IProductoServicio _productoServicio
@inject ISnackbar _snackBar
@inject IItemServicio _ItemServicio

<MudDialog Style="width:400px">

    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">


            <EditForm Model="@_producto">
                <DataAnnotationsValidator />
                <MudTextField @bind-Value="@_producto.Descripcion" Class="mb-3"
                              Label="Descripción" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Sharp.Adjust" />
                <MudSelect T="string" Label="Ubicación" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                @bind-Value="@_producto.Ubicacion" Margin="Margin.Dense">
                    <MudSelectItem Value="@("Central")" />
                    <MudSelectItem Value="@("Ubicación 1")" />
                </MudSelect>

                @if (Item != null)
                {
                    <MudSelect Label="Item" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                    @bind-Value="@Item.Descripcion" Margin="Margin.Dense">
                        @if (listaItems.Any())
                        {
                            foreach (var rol in listaItems)
                            {
                                <MudSelectItem Value="@rol.Descripcion">@rol.Descripcion</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                @if (!bClearInputFile)
                {
                    <InputFile OnChange="UploadItem" class="form-control mt-4"></InputFile>
                }
            </EditForm>


        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public ProductoDTO _producto { get; set; } = new ProductoDTO();
    [Parameter]
    public string categoria { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    List<ItemDTO> listaItems = new();
    ItemDTO Item = new();
    private bool bClearInputFile = false;


    protected override async Task OnInitializedAsync()
    {
        await ObtenerItems();
        if (_producto != null && _producto.IdItemNavigation != null)
        {
            Item = _producto.IdItemNavigation;
        }
    }

    private async Task ObtenerItems()
    {
        var result = await _ItemServicio.Filtrar(categoria);

        if (result.status)
        {
            listaItems = (List<ItemDTO>)result.value!;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task Guardar()
    {
        string _mensaje = "";
        bool _resultado;

        if (_producto.IdProducto != 0)
        {
            _resultado = await _productoServicio.Editar(_producto);
            _mensaje = "Producto modificad";
        }
        else
        {
            //levanto el IdItem en función a Item.Descripcion
            _producto.IdItem = listaItems.Where(i=>i.Descripcion == Item.Descripcion).First().IdItem;
            var response = await _productoServicio.Crear(_producto);
            _resultado = response.status;
            _mensaje = "Producto creado";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 600);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 600);

    }
    private async Task UploadItem(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedFile = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedFile.Size];

        await resizedFile.OpenReadStream().ReadAsync(buffer);
        _producto.Factura = buffer;
    }
}
